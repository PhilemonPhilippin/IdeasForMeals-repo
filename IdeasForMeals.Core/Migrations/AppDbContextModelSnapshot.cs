// <auto-generated />
using System;
using IdeasForMeals.Core.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IdeasForMeals.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IdeasForMeals.Core.Database.Entities.Food", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("FoodGroupId")
                        .HasColumnType("uuid");

                    b.Property<bool>("FromInitialSeed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("FoodGroupId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("25e91772-a804-4777-8796-25be7866706d"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3991),
                            CreatedBy = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodGroupId = new Guid("a6c69613-7937-45de-88a2-64f7e6fa280a"),
                            FromInitialSeed = true,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3992),
                            Name = "tomato"
                        },
                        new
                        {
                            Id = new Guid("b134f778-a221-4778-b5d2-13a2619eb4a3"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3994),
                            CreatedBy = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodGroupId = new Guid("85fceaf1-a50b-4a7f-a3b1-715eda1e58cb"),
                            FromInitialSeed = true,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3995),
                            Name = "pasta"
                        },
                        new
                        {
                            Id = new Guid("b61c22c3-934f-435e-afed-821384f98228"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3996),
                            CreatedBy = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodGroupId = new Guid("a6c69613-7937-45de-88a2-64f7e6fa280a"),
                            FromInitialSeed = true,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3997),
                            Name = "onion"
                        },
                        new
                        {
                            Id = new Guid("c2e81b21-73fa-4cbc-8d21-95f8b2c6d29d"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3999),
                            CreatedBy = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodGroupId = new Guid("a6c69613-7937-45de-88a2-64f7e6fa280a"),
                            FromInitialSeed = true,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3999),
                            Name = "courgette"
                        },
                        new
                        {
                            Id = new Guid("5beaed40-dd43-4557-bcc6-b8bd41aba4bb"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4001),
                            CreatedBy = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodGroupId = new Guid("a6c69613-7937-45de-88a2-64f7e6fa280a"),
                            FromInitialSeed = true,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4001),
                            Name = "carrot"
                        },
                        new
                        {
                            Id = new Guid("ed537fc9-9810-42b1-bb75-7c5c6b14da0b"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4003),
                            CreatedBy = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodGroupId = new Guid("a6c69613-7937-45de-88a2-64f7e6fa280a"),
                            FromInitialSeed = true,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4003),
                            Name = "red pepper"
                        },
                        new
                        {
                            Id = new Guid("75c26c32-2136-4f65-9ead-21a5f9ce7222"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4007),
                            CreatedBy = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodGroupId = new Guid("affaf49a-c470-4c9f-9ec3-425789454dc6"),
                            FromInitialSeed = true,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4008),
                            Name = "parmesan cheese"
                        });
                });

            modelBuilder.Entity("IdeasForMeals.Core.Database.Entities.FoodGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("FoodGroups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("85fceaf1-a50b-4a7f-a3b1-715eda1e58cb"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3943),
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3943),
                            Name = "carbohydrate"
                        },
                        new
                        {
                            Id = new Guid("affaf49a-c470-4c9f-9ec3-425789454dc6"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3945),
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3945),
                            Name = "protein"
                        },
                        new
                        {
                            Id = new Guid("a6c69613-7937-45de-88a2-64f7e6fa280a"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3962),
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3962),
                            Name = "vegetable"
                        },
                        new
                        {
                            Id = new Guid("a7bc694d-efd4-497d-a675-a608bdcc0c37"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3964),
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3964),
                            Name = "fruit"
                        });
                });

            modelBuilder.Entity("IdeasForMeals.Core.Database.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            Alias = "Admin#0000",
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3906),
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(3908)
                        });
                });

            modelBuilder.Entity("IdeasForMeals.Core.Database.Entities.UserFood", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsCurrentDiet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "FoodId");

                    b.HasIndex("FoodId");

                    b.ToTable("UserFoods");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodId = new Guid("25e91772-a804-4777-8796-25be7866706d"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4012),
                            IsCurrentDiet = false,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4012)
                        },
                        new
                        {
                            UserId = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodId = new Guid("b134f778-a221-4778-b5d2-13a2619eb4a3"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4014),
                            IsCurrentDiet = false,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4014)
                        },
                        new
                        {
                            UserId = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodId = new Guid("b61c22c3-934f-435e-afed-821384f98228"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4015),
                            IsCurrentDiet = false,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4015)
                        },
                        new
                        {
                            UserId = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodId = new Guid("c2e81b21-73fa-4cbc-8d21-95f8b2c6d29d"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4016),
                            IsCurrentDiet = false,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4016)
                        },
                        new
                        {
                            UserId = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodId = new Guid("5beaed40-dd43-4557-bcc6-b8bd41aba4bb"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4017),
                            IsCurrentDiet = false,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4017)
                        },
                        new
                        {
                            UserId = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodId = new Guid("ed537fc9-9810-42b1-bb75-7c5c6b14da0b"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4020),
                            IsCurrentDiet = false,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4020)
                        },
                        new
                        {
                            UserId = new Guid("8d81cace-eab8-4c04-b294-d62be4666777"),
                            FoodId = new Guid("75c26c32-2136-4f65-9ead-21a5f9ce7222"),
                            CreatedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4021),
                            IsCurrentDiet = false,
                            ModifiedAt = new DateTime(2024, 11, 9, 4, 56, 12, 679, DateTimeKind.Utc).AddTicks(4021)
                        });
                });

            modelBuilder.Entity("IdeasForMeals.Core.Database.Entities.Food", b =>
                {
                    b.HasOne("IdeasForMeals.Core.Database.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("CreatedBy");

                    b.HasOne("IdeasForMeals.Core.Database.Entities.FoodGroup", "FoodGroup")
                        .WithMany()
                        .HasForeignKey("FoodGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FoodGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeasForMeals.Core.Database.Entities.UserFood", b =>
                {
                    b.HasOne("IdeasForMeals.Core.Database.Entities.Food", "Food")
                        .WithMany("UserFoods")
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IdeasForMeals.Core.Database.Entities.User", "User")
                        .WithMany("UserFoods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IdeasForMeals.Core.Database.Entities.Food", b =>
                {
                    b.Navigation("UserFoods");
                });

            modelBuilder.Entity("IdeasForMeals.Core.Database.Entities.User", b =>
                {
                    b.Navigation("UserFoods");
                });
#pragma warning restore 612, 618
        }
    }
}
